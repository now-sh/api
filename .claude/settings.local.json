{
  "permissions": {
    "allow": [
      "Bash(pkill:*)",
      "Bash(curl:*)",
      "Bash(true)",
      "Bash(npm restart)",
      "Bash(npm start)",
      "Bash(for i in 1 2 3)",
      "Bash(do node:*)",
      "Bash(done)",
      "Bash(mongo:*)",
      "Bash(docker exec:*)",
      "Bash(find:*)",
      "Bash(cat:*)",
      "Bash(lsof:*)",
      "Bash(npm install:*)",
      "Bash(ls:*)",
      "Bash(rg:*)",
      "Bash(echo)",
      "Bash(mv:*)",
      "Bash(# Test Base64 endpoints\necho \"\"=== BASE64 TESTS ===\"\"\necho \"\"1. Encode JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/base64/encode -H \"\"Content-Type: application/json\"\" -d ''{\"\"data\"\":\"\"Hello World\"\"}'' | jq\n\necho -e \"\"\\n2. Encode Text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/base64/encode/text -H \"\"Content-Type: application/json\"\" -d ''{\"\"data\"\":\"\"Hello World\"\"}''\n\necho -e \"\"\\n\\n3. Decode JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/base64/decode -H \"\"Content-Type: application/json\"\" -d ''{\"\"data\"\":\"\"SGVsbG8gV29ybGQ=\"\"}'' | jq\n\necho -e \"\"\\n4. Decode Text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/base64/decode/text -H \"\"Content-Type: application/json\"\" -d ''{\"\"data\"\":\"\"SGVsbG8gV29ybGQ=\"\"}''\n\necho -e \"\"\\n\\n5. Help endpoint:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/base64/help | jq -c ''.data.endpoints'')",
      "Bash(# Test Base64 endpoints with correct field names\necho \"\"=== BASE64 TESTS (CORRECTED) ===\"\"\necho \"\"1. Encode JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/base64/encode -H \"\"Content-Type: application/json\"\" -d ''{\"\"text\"\":\"\"Hello World\"\"}'' | jq\n\necho -e \"\"\\n2. Encode Text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/base64/encode/text -H \"\"Content-Type: application/json\"\" -d ''{\"\"text\"\":\"\"Hello World\"\"}''\n\necho -e \"\"\\n\\n3. Decode JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/base64/decode -H \"\"Content-Type: application/json\"\" -d ''{\"\"text\"\":\"\"SGVsbG8gV29ybGQ=\"\"}'' | jq\n\necho -e \"\"\\n4. Decode Text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/base64/decode/text -H \"\"Content-Type: application/json\"\" -d ''{\"\"text\"\":\"\"SGVsbG8gV29ybGQ=\"\"}'')",
      "Bash(# Test Hash endpoints\necho \"\"=== HASH TESTS ===\"\"\necho \"\"1. Generate hash JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/hash/generate -H \"\"Content-Type: application/json\"\" -d ''{\"\"text\"\":\"\"password123\"\",\"\"algorithm\"\":\"\"sha256\"\"}'' | jq\n\necho -e \"\"\\n2. Generate hash Text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/hash/generate/text -H \"\"Content-Type: application/json\"\" -d ''{\"\"text\"\":\"\"password123\"\",\"\"algorithm\"\":\"\"sha256\"\"}''\n\necho -e \"\"\\n\\n3. Verify hash JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/hash/verify -H \"\"Content-Type: application/json\"\" -d ''{\"\"text\"\":\"\"password123\"\",\"\"hash\"\":\"\"ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f\"\",\"\"algorithm\"\":\"\"sha256\"\"}'' | jq\n\necho -e \"\"\\n4. Batch hash JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/hash/batch -H \"\"Content-Type: application/json\"\" -d ''{\"\"texts\"\":[\"\"test1\"\",\"\"test2\"\"],\"\"algorithm\"\":\"\"md5\"\"}'' | jq -c)",
      "Bash(# Test Hash endpoints with correct URL pattern\necho \"\"=== HASH TESTS (CORRECTED) ===\"\"\necho \"\"1. Generate SHA256 hash JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/hash/sha256 -H \"\"Content-Type: application/json\"\" -d ''{\"\"text\"\":\"\"password123\"\"}'' | jq\n\necho -e \"\"\\n2. Generate SHA256 hash Text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/hash/sha256/text -H \"\"Content-Type: application/json\"\" -d ''{\"\"text\"\":\"\"password123\"\"}''\n\necho -e \"\"\\n\\n3. Verify hash JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/hash/verify -H \"\"Content-Type: application/json\"\" -d ''{\"\"text\"\":\"\"password123\"\",\"\"hash\"\":\"\"ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f\"\",\"\"algorithm\"\":\"\"sha256\"\"}'' | jq\n\necho -e \"\"\\n4. Batch hash JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/hash/batch -H \"\"Content-Type: application/json\"\" -d ''{\"\"texts\"\":[\"\"test1\"\",\"\"test2\"\"],\"\"algorithm\"\":\"\"md5\"\"}'' | jq -c)",
      "Bash(# Test Hash endpoints with correct base path\necho \"\"=== HASH TESTS (CORRECT PATH) ===\"\"\necho \"\"1. Generate SHA256 hash JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/hash/sha256 -H \"\"Content-Type: application/json\"\" -d ''{\"\"text\"\":\"\"password123\"\"}'' | jq\n\necho -e \"\"\\n2. Generate SHA256 hash Text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/hash/sha256/text -H \"\"Content-Type: application/json\"\" -d ''{\"\"text\"\":\"\"password123\"\"}''\n\necho -e \"\"\\n\\n3. Verify hash JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/hash/sha256/verify -H \"\"Content-Type: application/json\"\" -d ''{\"\"text\"\":\"\"password123\"\",\"\"hash\"\":\"\"ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f\"\"}'' | jq\n\necho -e \"\"\\n4. Batch hash JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/hash/md5/batch -H \"\"Content-Type: application/json\"\" -d ''{\"\"texts\"\":[\"\"test1\"\",\"\"test2\"\"]}'' | jq -c)",
      "Bash(# Test UUID endpoints\necho \"\"=== UUID TESTS ===\"\"\necho \"\"1. Generate UUID JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/uuid | jq -c\n\necho -e \"\"\\n2. Generate UUID Text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/uuid/text\n\necho -e \"\"\\n\\n3. Generate multiple UUIDs:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/uuid/generate?count=3 | jq -c\n\necho -e \"\"\\n4. Validate UUID:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/uuid/validate?uuid=550e8400-e29b-41d4-a716-446655440000 | jq -c)",
      "Bash(# Test UUID endpoints with correct paths\necho \"\"=== UUID TESTS (CORRECTED) ===\"\"\necho \"\"1. Generate UUID v4 JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/uuid/v4 | jq -c\n\necho -e \"\"\\n2. Generate UUID v4 Text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/uuid/v4/text\n\necho -e \"\"\\n\\n3. Generate multiple UUIDs:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/uuid/generate/3 | jq -c\n\necho -e \"\"\\n4. Generate with options:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/uuid/generate -H \"\"Content-Type: application/json\"\" -d ''{\"\"uppercase\"\": true, \"\"count\"\": 2}'' | jq -c\n\necho -e \"\"\\n5. Validate UUID:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/uuid/validate/550e8400-e29b-41d4-a716-446655440000 | jq -c)",
      "Bash(# Test JWT endpoints\necho \"\"=== JWT TESTS ===\"\"\necho \"\"1. Decode JWT JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/jwt/decode -H \"\"Content-Type: application/json\"\" -d ''{\"\"token\"\":\"\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\"}'' | jq -c\n\necho -e \"\"\\n2. Decode JWT Text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/jwt/decode/text -H \"\"Content-Type: application/json\"\" -d ''{\"\"token\"\":\"\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\"}''\n\n# Test QR endpoints\necho -e \"\"\\n\\n=== QR TESTS ===\"\"\necho \"\"1. Generate QR JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/qr/generate -H \"\"Content-Type: application/json\"\" -d ''{\"\"text\"\":\"\"Hello QR\"\",\"\"format\"\":\"\"png\"\"}'' | jq -c ''.data'' | head -c 100\n\necho -e \"\"\\n\\n2. Generate QR Text (ASCII):\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/qr/generate/text -H \"\"Content-Type: application/json\"\" -d ''{\"\"text\"\":\"\"Hi\"\"}'' | head -10)",
      "Bash(# Test Color endpoints\necho \"\"=== COLOR TESTS ===\"\"\necho \"\"1. Convert color JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/color/convert -H \"\"Content-Type: application/json\"\" -d ''{\"\"color\"\":\"\"#FF5733\"\"}'' | jq -c\n\necho -e \"\"\\n2. Get color info:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/color/info?color=%23FF5733 | jq -c ''.data'' | head -c 200\n\n# Test Password endpoints\necho -e \"\"\\n\\n=== PASSWORD TESTS ===\"\"\necho \"\"1. Generate password JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/genpasswd | jq -c\n\necho -e \"\"\\n2. Generate password Text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/genpasswd/text\n\necho -e \"\"\\n3. Generate with options:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/utilities/genpasswd/generate -H \"\"Content-Type: application/json\"\" -d ''{\"\"length\"\":20,\"\"includeUppercase\"\":true,\"\"includeLowercase\"\":true,\"\"includeNumbers\"\":true,\"\"includeSymbols\"\":false}'' | jq -c)",
      "Bash(# Test Color endpoints with correct params\necho \"\"=== COLOR TESTS (CORRECTED) ===\"\"\necho \"\"1. Convert color JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/color/convert -H \"\"Content-Type: application/json\"\" -d ''{\"\"color\"\":\"\"#FF5733\"\",\"\"from\"\":\"\"hex\"\",\"\"to\"\":\"\"rgb\"\"}'' | jq -c\n\necho -e \"\"\\n2. Generate palette:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/color/palette -H \"\"Content-Type: application/json\"\" -d ''{\"\"baseColor\"\":\"\"#FF5733\"\",\"\"count\"\":5}'' | jq -c ''.data.palette[]''\n\n# Test Password endpoints\necho -e \"\"\\n\\n=== PASSWORD TESTS (CORRECTED) ===\"\"\necho \"\"1. Generate password JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/passwd | jq -c\n\necho -e \"\"\\n2. Generate password Text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/passwd/text\n\necho -e \"\"\\n3. Check password strength:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/passwd/check -H \"\"Content-Type: application/json\"\" -d ''{\"\"password\"\":\"\"MyP@ssw0rd123!\"\"}'' | jq -c)",
      "Bash(# Test Password endpoints with correct URLs\necho \"\"=== PASSWORD TESTS (FIXED) ===\"\"\necho \"\"1. Generate password with length:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/passwd/16 | jq -c\n\necho -e \"\"\\n2. Generate password text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/passwd/16/text\n\necho -e \"\"\\n\\n3. Generate batch passwords:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/passwd/batch/3/12 | jq -c\n\n# Test Commit endpoints\necho -e \"\"\\n\\n=== COMMIT TESTS ===\"\"\necho \"\"1. Generate commit message:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/commit | jq -c\n\necho -e \"\"\\n2. Generate commit text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/commit/text\n\necho -e \"\"\\n3. Multiple commits:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/commit/batch/3 | jq -c)",
      "Bash(# Test Anime endpoints\necho \"\"=== ANIME TESTS ===\"\"\necho \"\"1. Get anime quote JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/anime | jq -c\n\necho -e \"\"\\n2. Get anime quote text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/anime/text\n\necho -e \"\"\\n\\n3. Multiple quotes:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/tools/anime/batch/2 | jq -c ''.data.quotes'' | head -c 200\n\n# Test GitHub endpoints\necho -e \"\"\\n\\n=== GITHUB TESTS ===\"\"\necho \"\"1. Get GitHub user:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/github/user/octocat | jq -c ''.login,.name,.public_repos''\n\necho -e \"\"\\n2. Get user repos:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/github/users/octocat/repos | jq -c ''.[0].name'' 2>/dev/null || echo \"\"(no repos)\"\"\n\n# Test Reddit endpoints\necho -e \"\"\\n\\n=== REDDIT TESTS ===\"\"\necho \"\"1. Get subreddit posts:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/reddit/sub/javascript | jq -c ''if type == \"\"array\"\" then .[0].title else .data.posts[0].title end'' 2>/dev/null || echo \"\"(error getting posts)\"\")",
      "Bash(# Test Anime endpoints with correct paths\necho \"\"=== ANIME TESTS (CORRECTED) ===\"\"\necho \"\"1. Get anime quote JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/fun/anime | jq -c\n\necho -e \"\"\\n2. Get anime quote text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/fun/anime/text\n\necho -e \"\"\\n3. Multiple quotes:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/fun/anime/batch/2 | jq -c\n\n# Test GitHub endpoints  \necho -e \"\"\\n\\n=== GITHUB TESTS (CORRECTED) ===\"\"\necho \"\"1. Get GitHub user:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/me/github/users/octocat | jq -c ''.login,.name,.public_repos'' | head -3\n\necho -e \"\"\\n2. Get user repos:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/me/github/users/octocat/repos?per_page=2 | jq -c ''.[0].name'' 2>/dev/null || echo \"\"(error)\"\"\n\n# Test Reddit endpoints\necho -e \"\"\\n\\n=== REDDIT TESTS (CORRECTED) ===\"\"\necho \"\"1. Get subreddit posts:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/me/reddit/r/javascript | jq -c ''.[0].title'' 2>/dev/null || echo \"\"(error)\"\")",
      "Bash(# Test with correct anime endpoints\necho \"\"=== ANIME TESTS (FINAL) ===\"\"\necho \"\"1. Get anime quote JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/fun/anime/quote | jq -c\n\necho -e \"\"\\n2. Get anime quote text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/fun/anime/quote/text\n\necho -e \"\"\\n\\n3. Multiple quotes JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/fun/anime/quotes/2 | jq -c\n\n# Test authenticated endpoints\necho -e \"\"\\n\\n=== URL SHORTENER TESTS ===\"\"\necho \"\"1. Get URL help:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/data/url | jq -c ''.data.endpoints'' | head -c 200\n\n# Test TODO endpoints\necho -e \"\"\\n\\n=== TODO TESTS ===\"\"\necho \"\"1. Get public todos:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/data/todos/public?limit=2 | jq -c\n\n# Test Notes endpoints\necho -e \"\"\\n\\n=== NOTES TESTS ===\"\"\necho \"\"1. Get notes list (unauthenticated):\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/data/notes/list?limit=2 | jq -c\n\n# Test Profile endpoint\necho -e \"\"\\n\\n=== PROFILE TESTS ===\"\"\necho \"\"1. Get profile JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/auth/profile | jq -c ''.data.profile.name,.data.profile.username'' 2>/dev/null || echo \"\"(error)\"\"\n\necho -e \"\"\\n2. Get profile text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/auth/profile/text | head -3)",
      "Bash(# Test URL shortener with correct path\necho \"\"=== URL SHORTENER TEST (CORRECTED) ===\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/data/urls | jq -c ''.data.endpoints'' | head -c 300\n\n# Find profile route path\necho -e \"\"\\n\\n=== CHECKING PROFILE ROUTE ===\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/version | jq -c ''.data.routes.auth'' 2>/dev/null || echo \"\"No auth routes in version endpoint\"\")",
      "Bash(# Test Profile endpoint with correct path\necho \"\"=== PROFILE TEST (CORRECTED) ===\"\"\necho \"\"1. Get profile JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/profile | jq -c ''.data.profile'' | head -c 200\n\necho -e \"\"\\n\\n2. Get profile text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/profile/text)",
      "Bash(echo:*)",
      "Bash(# Test new /me/info endpoints\necho \"\"=== TESTING /me/info ENDPOINTS ===\"\"\necho -e \"\"\\n1. Help endpoint:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/me/info | jq -c ''.data.endpoints''\n\necho -e \"\"\\n\\n2. Profile JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/me/info/profile | jq -c ''.data.profile'' | head -c 200\n\necho -e \"\"\\n\\n3. Profile Text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/me/info/profile/text | head -5\n\necho -e \"\"\\n\\n4. Domains JSON:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/me/info/domains | jq -c ''.data.count''\n\necho -e \"\"\\n\\n5. Resume info:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/me/info/resume | jq -c ''.data''\n\necho -e \"\"\\n\\n6. Resume text:\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/me/info/resume/text)",
      "Bash(# Test resume PDF endpoints\necho \"\"=== TESTING RESUME PDF ENDPOINTS ===\"\"\necho -e \"\"\\n1. Check if view endpoint returns PDF:\"\"\ncurl -s -I http://amd.amd64.us:1919/api/v1/me/info/resume/view | head -10\n\necho -e \"\"\\n\\n2. Check if download endpoint returns PDF with attachment:\"\"\ncurl -s -I http://amd.amd64.us:1919/api/v1/me/info/resume/download | head -10)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(# Test the new /me/info/github and /me/info/reddit endpoints\necho \"\"=== Testing /me/info endpoints ===\"\"\necho \"\"1. GitHub (casjay):\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/me/info/github | jq -c ''.login,.name,.public_repos'' | head -3\n\necho -e \"\"\\n2. Reddit (casjay):\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/me/info/reddit | jq -c ''.data.name'' 2>/dev/null || echo \"\"(Reddit API error)\"\"\n\n# Test the social endpoints\necho -e \"\"\\n\\n=== Testing /social endpoints ===\"\"\necho \"\"3. GitHub user (any user):\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/social/github/user/octocat | jq -c ''.login,.name'' | head -2\n\necho -e \"\"\\n4. Reddit user (any user):\"\"\ncurl -s http://amd.amd64.us:1919/api/v1/social/reddit/u/spez | jq -c ''.user.data.name'' 2>/dev/null || echo \"\"(Reddit API error)\"\")",
      "Bash(grep:*)",
      "Bash(node:*)",
      "WebFetch(domain:api.casjay.coffee)",
      "Bash(npm run build:*)",
      "Bash(vercel dev:*)",
      "Bash(npm test)",
      "Bash(npm run:*)",
      "Bash(npx eslint:*)",
      "Bash(rm:*)",
      "Bash(vercel logs:*)",
      "Bash(vercel ls:*)"
    ],
    "deny": [],
    "ask": []
  }
}