<div class="hero fade-in">
    <h1>üìä System Version & Status</h1>
    <p class="lead">API version information and authentication status</p>
</div>

<div class="row">
    <div class="col-md-10 mx-auto">
        <!-- Authentication Status -->
        <div class="card mb-4">
            <h2 class="card-title">üîê Authentication Status</h2>
            <div id="authStatus" class="auth-status">
                <div class="loading">Checking authentication...</div>
            </div>
        </div>

        <!-- System Information -->
        <div class="card mb-4">
            <h2 class="card-title">‚öôÔ∏è System Information</h2>
            <div id="systemInfo" class="system-info">
                <div class="loading">Loading system information...</div>
            </div>
        </div>

        <!-- API Health -->
        <div class="card mb-4">
            <h2 class="card-title">üè• API Health Status</h2>
            <div id="healthStatus" class="health-status">
                <div class="loading">Checking API health...</div>
            </div>
        </div>

        <!-- User Data Summary (if authenticated) -->
        <div id="userDataCard" class="card mb-4" style="display: none;">
            <h2 class="card-title">üìÑ Your Data Summary</h2>
            <div id="userDataSummary" class="user-data-grid">
                <div class="loading">Loading your data summary...</div>
            </div>
        </div>
    </div>
</div>

<style>
.auth-status {
    padding: 2rem;
    border-radius: var(--radius-lg);
    text-align: center;
}

.auth-status.authenticated {
    background: linear-gradient(135deg, rgba(34, 197, 94, 0.1) 0%, rgba(34, 197, 94, 0.05) 100%);
    border: 1px solid rgba(34, 197, 94, 0.2);
}

.auth-status.unauthenticated {
    background: linear-gradient(135deg, rgba(239, 68, 68, 0.1) 0%, rgba(239, 68, 68, 0.05) 100%);
    border: 1px solid rgba(239, 68, 68, 0.2);
}

.auth-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    display: block;
}

.auth-message {
    font-size: 1.2rem;
    margin-bottom: 1rem;
    font-weight: 600;
}

.user-email {
    color: var(--cyan);
    font-family: 'Monaco', 'Consolas', monospace;
    background: var(--bg-secondary);
    padding: 0.5rem 1rem;
    border-radius: var(--radius-md);
    display: inline-block;
    margin-top: 0.5rem;
}

.system-info {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
}

.info-card {
    background: var(--bg-secondary);
    padding: 1.5rem;
    border-radius: var(--radius-md);
    border: 1px solid var(--border-color);
    text-align: center;
    transition: all 0.2s ease;
}

.info-card:hover {
    transform: translateY(-2px);
    border-color: var(--purple);
}

.info-icon {
    font-size: 2rem;
    margin-bottom: 1rem;
    display: block;
}

.info-value {
    font-size: 1.8rem;
    font-weight: 700;
    color: var(--purple);
    margin-bottom: 0.5rem;
    font-family: 'Monaco', 'Consolas', monospace;
}

.info-label {
    color: var(--text-secondary);
    font-size: 0.9rem;
    text-transform: uppercase;
    font-weight: 500;
}

.health-status {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
}

.health-card {
    background: var(--bg-secondary);
    padding: 1.5rem;
    border-radius: var(--radius-md);
    border: 1px solid var(--border-color);
    text-align: center;
    transition: all 0.2s ease;
}

.health-card.healthy {
    border-color: rgba(34, 197, 94, 0.5);
    background: linear-gradient(135deg, var(--bg-secondary) 0%, rgba(34, 197, 94, 0.05) 100%);
}

.health-card.degraded {
    border-color: rgba(245, 158, 11, 0.5);
    background: linear-gradient(135deg, var(--bg-secondary) 0%, rgba(245, 158, 11, 0.05) 100%);
}

.health-card.unhealthy {
    border-color: rgba(239, 68, 68, 0.5);
    background: linear-gradient(135deg, var(--bg-secondary) 0%, rgba(239, 68, 68, 0.05) 100%);
}

.user-data-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
}

.data-card {
    background: var(--bg-secondary);
    padding: 1.5rem;
    border-radius: var(--radius-md);
    border: 1px solid var(--border-color);
    text-align: center;
    transition: all 0.2s ease;
    cursor: pointer;
}

.data-card:hover {
    transform: translateY(-2px);
    border-color: var(--cyan);
}

.data-count {
    font-size: 2rem;
    font-weight: 700;
    color: var(--cyan);
    margin-bottom: 0.5rem;
    font-family: 'Monaco', 'Consolas', monospace;
}

.loading, .error {
    text-align: center;
    padding: 2rem;
    color: var(--text-secondary);
}

.error {
    color: var(--red);
}

.btn-auth {
    background: linear-gradient(135deg, var(--purple) 0%, var(--cyan) 100%);
    border: none;
    color: white;
    padding: 0.75rem 2rem;
    border-radius: var(--radius-lg);
    font-weight: 600;
    margin-top: 1rem;
    transition: all 0.3s ease;
}

.btn-auth:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(139, 69, 233, 0.3);
    color: white;
}
</style>

<script>
let userToken = null;
let userEmail = null;

document.addEventListener('DOMContentLoaded', async function() {
    await checkAuthentication();
    await loadSystemInfo();
    await loadHealthStatus();
    
    if (userToken) {
        await loadUserDataSummary();
    }
});

async function checkAuthentication() {
    const authDiv = document.getElementById('authStatus');
    
    if (!AuthCookies.isAuthenticated()) {
        authDiv.className = 'auth-status unauthenticated';
        authDiv.innerHTML = `
            <span class="auth-icon">üîí</span>
            <div class="auth-message">Not Authenticated</div>
            <p>You are not currently signed in to the system.</p>
            <button class="btn btn-auth" onclick="redirectToAuth()">Sign In</button>
        `;
        return;
    }
    
    try {
        const userInfo = AuthCookies.getUserInfo();
        if (userInfo) {
            userToken = AuthCookies.getToken();
            userEmail = userInfo.email || 'Unknown User';
            
            authDiv.className = 'auth-status authenticated';
            authDiv.innerHTML = `
                <span class="auth-icon">‚úÖ</span>
                <div class="auth-message">Authenticated</div>
                <p>You are signed in as:</p>
                <div class="user-email">${userEmail}</div>
                <p class="mt-3"><small>Token expires: ${userInfo.expiresAt.toLocaleString()}</small></p>
            `;
            
            // Show user data card
            document.getElementById('userDataCard').style.display = 'block';
        } else {
            throw new Error('Unable to decode token');
        }
        
    } catch (error) {
        authDiv.className = 'auth-status unauthenticated';
        authDiv.innerHTML = `
            <span class="auth-icon">‚ö†Ô∏è</span>
            <div class="auth-message">Invalid Token</div>
            <p>Your authentication token is invalid or expired.</p>
            <button class="btn btn-auth" onclick="clearAndRedirectToAuth()">Sign In Again</button>
        `;
    }
}

async function loadSystemInfo() {
    const systemDiv = document.getElementById('systemInfo');
    
    try {
        const response = await fetch('/api/v1/version');
        const data = await response.json();
        
        systemDiv.innerHTML = `
            <div class="info-card">
                <span class="info-icon">üî¢</span>
                <div class="info-value">${data.Version || 'Unknown'}</div>
                <div class="info-label">API Version</div>
            </div>
            <div class="info-card">
                <span class="info-icon">üåç</span>
                <div class="info-value">${data.TimeZone || 'UTC'}</div>
                <div class="info-label">Timezone</div>
            </div>
            <div class="info-card">
                <span class="info-icon">üìÖ</span>
                <div class="info-value">${data.Today || new Date().toLocaleDateString()}</div>
                <div class="info-label">Server Date</div>
            </div>
            <div class="info-card">
                <span class="info-icon">‚è∞</span>
                <div class="info-value">${data.Time || new Date().toLocaleTimeString()}</div>
                <div class="info-label">Server Time</div>
            </div>
        `;
    } catch (error) {
        systemDiv.innerHTML = '<div class="error">Error loading system information</div>';
    }
}

async function loadHealthStatus() {
    const healthDiv = document.getElementById('healthStatus');
    
    try {
        const response = await fetch('/api/v1/version');
        const data = await response.json();
        const health = data.Health || {};
        
        const dbStatus = data.Database?.Status || 'Unknown';
        const healthStatus = health.Status || 'unknown';
        
        healthDiv.innerHTML = `
            <div class="health-card ${healthStatus.toLowerCase()}">
                <span class="info-icon">${getHealthIcon(healthStatus)}</span>
                <div class="info-value">${healthStatus}</div>
                <div class="info-label">Overall Health</div>
            </div>
            <div class="health-card ${dbStatus === 'Connected' ? 'healthy' : 'unhealthy'}">
                <span class="info-icon">${dbStatus === 'Connected' ? 'üü¢' : 'üî¥'}</span>
                <div class="info-value">${dbStatus}</div>
                <div class="info-label">Database</div>
            </div>
            <div class="health-card healthy">
                <span class="info-icon">üåê</span>
                <div class="info-value">Online</div>
                <div class="info-label">API Status</div>
            </div>
        `;
    } catch (error) {
        healthDiv.innerHTML = '<div class="error">Error loading health status</div>';
    }
}

async function loadUserDataSummary() {
    const userDataDiv = document.getElementById('userDataSummary');
    
    try {
        const [todos, urls, notes] = await Promise.all([
            AuthCookies.authenticatedFetch('/api/v1/data/todos/list'),
            AuthCookies.authenticatedFetch('/api/v1/data/urls/list'),
            AuthCookies.authenticatedFetch('/api/v1/data/notes/list')
        ]);
        
        const todosData = todos.ok ? await todos.json() : null;
        const urlsData = urls.ok ? await urls.json() : null;
        const notesData = notes.ok ? await notes.json() : null;
        
        const todosCount = todosData?.success ? (todosData.data.todos?.length || 0) : 0;
        const urlsCount = urlsData?.success ? (urlsData.data.urls?.length || 0) : 0;
        const notesCount = notesData?.success ? (notesData.data.notes?.length || 0) : 0;
        
        userDataDiv.innerHTML = `
            <div class="data-card" onclick="location.href='/personal/todos'">
                <span class="info-icon">‚úÖ</span>
                <div class="data-count">${todosCount}</div>
                <div class="info-label">Todos</div>
            </div>
            <div class="data-card" onclick="location.href='/services/url'">
                <span class="info-icon">üîó</span>
                <div class="data-count">${urlsCount}</div>
                <div class="info-label">Short URLs</div>
            </div>
            <div class="data-card" onclick="location.href='/personal/notes'">
                <span class="info-icon">üìù</span>
                <div class="data-count">${notesCount}</div>
                <div class="info-label">Notes</div>
            </div>
        `;
    } catch (error) {
        userDataDiv.innerHTML = '<div class="error">Error loading user data summary</div>';
    }
}

function getHealthIcon(status) {
    switch (status.toLowerCase()) {
        case 'healthy': return 'üü¢';
        case 'degraded': return 'üü°';
        case 'unhealthy': return 'üî¥';
        default: return '‚ùì';
    }
}

function redirectToAuth() {
    // You can customize this to your auth page
    alert('Authentication system would redirect here. For now, please use the API directly.');
}

function clearAndRedirectToAuth() {
    AuthCookies.removeToken();
    location.reload();
}
</script>