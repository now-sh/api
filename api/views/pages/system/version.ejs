<div class="hero fade-in">
    <h1>üìä API Version & Status</h1>
    <p class="lead">Complete API version information and system status</p>
</div>

<div class="row">
    <div class="col-md-10 mx-auto">
        <!-- API Version Information -->
        <div class="card mb-4">
            <h2 class="card-title">üîñ Version Information</h2>
            <div id="versionInfo" class="version-info">
                <div class="loading">Loading version information...</div>
            </div>
        </div>

        <!-- Authentication Status -->
        <div class="card mb-4">
            <h2 class="card-title">üîê Authentication Status</h2>
            <div id="authStatus" class="auth-status">
                <div class="loading">Checking authentication...</div>
            </div>
        </div>

        <!-- Health Status -->
        <div class="card mb-4">
            <h2 class="card-title">üè• Health Status</h2>
            <div id="healthStatus" class="health-status">
                <div class="loading">Checking health status...</div>
            </div>
        </div>

        <!-- Database Status -->
        <div class="card mb-4">
            <h2 class="card-title">üóÑÔ∏è Database Status</h2>
            <div id="databaseStatus" class="database-status">
                <div class="loading">Checking database status...</div>
            </div>
        </div>

        <!-- Environment Information -->
        <div class="card mb-4">
            <h2 class="card-title">üåç Environment</h2>
            <div id="environmentInfo" class="environment-info">
                <div class="loading">Loading environment info...</div>
            </div>
        </div>

        <!-- Proxy Configuration -->
        <div class="card mb-4">
            <h2 class="card-title">üîó Proxy Configuration</h2>
            <div id="proxyConfig" class="proxy-config">
                <div class="loading">Loading proxy configuration...</div>
            </div>
        </div>

        <!-- System Information -->
        <div class="card mb-4">
            <h2 class="card-title">‚öôÔ∏è System Information</h2>
            <div id="systemInfo" class="system-info">
                <div class="loading">Loading system information...</div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', async function() {
    await loadVersionInfo();
});

async function loadVersionInfo() {
    try {
        const response = await fetch('/api/v1/version');
        const data = await response.json();
        
        if (response.ok && data) {
            displayVersionInfo(data);
        } else {
            showError('versionInfo', 'Unable to load version information');
        }
    } catch (error) {
        console.error('Error loading version:', error);
        showError('versionInfo', 'Failed to load version information');
    }
}

function displayVersionInfo(data) {
    // Display version information
    const versionDiv = document.getElementById('versionInfo');
    versionDiv.innerHTML = `
        <div class="info-grid">
            <div class="info-item">
                <span class="info-label">API Version</span>
                <span class="info-value">${data.Version || 'Unknown'}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Time Zone</span>
                <span class="info-value">${data.TimeZone || 'Unknown'}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Current Time</span>
                <span class="info-value">${data.Time || 'Unknown'}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Today</span>
                <span class="info-value">${data.Today || 'Unknown'}</span>
            </div>
        </div>
        <div class="greeting-banner">
            ${data.Greetings || 'Welcome to the API Server'}
        </div>
    `;

    // Display authentication status
    const authDiv = document.getElementById('authStatus');
    authDiv.innerHTML = `
        <div class="info-grid">
            <div class="info-item">
                <span class="info-label">Authentication</span>
                <span class="info-value ${data.Auth === 'yes' ? 'success' : 'warning'}">${data.Auth || 'Unknown'}</span>
            </div>
            <div class="info-item">
                <span class="info-label">GitHub Token</span>
                <span class="info-value ${data.GitHubToken ? 'success' : 'error'}">${data.GitHubToken || 'Not Set'}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Reddit Auth</span>
                <span class="info-value ${data.RedditAuth === 'Set and Valid' ? 'success' : 'error'}">${data.RedditAuth || 'Not Set'}</span>
            </div>
        </div>
    `;

    // Display health status
    const healthDiv = document.getElementById('healthStatus');
    if (data.Health) {
        const statusClass = data.Health.Status === 'healthy' ? 'success' : 'warning';
        healthDiv.innerHTML = `
            <div class="status-indicator ${statusClass}">
                <span class="status-dot"></span>
                <span class="status-text">${data.Health.Status}</span>
            </div>
            <div class="info-item mt-3">
                <span class="info-label">Issues</span>
                <span class="info-value">${data.Health.Issues?.length || 0} issues</span>
            </div>
            <div class="info-item">
                <span class="info-label">Last Check</span>
                <span class="info-value">${new Date(data.Health.Timestamp).toLocaleString()}</span>
            </div>
        `;
    } else {
        healthDiv.innerHTML = '<div class="no-data">Health information not available</div>';
    }

    // Display database status
    const dbDiv = document.getElementById('databaseStatus');
    if (data.Database) {
        const dbStatus = data.Database.Status || 'Unknown';
        const statusClass = dbStatus === 'Connected' ? 'success' : dbStatus === 'Disconnected' ? 'error' : 'warning';
        dbDiv.innerHTML = `
            <div class="status-indicator ${statusClass}">
                <span class="status-dot"></span>
                <span class="status-text">${dbStatus}</span>
            </div>
            ${data.Database.ConnectionString ? `
                <div class="info-item mt-3">
                    <span class="info-label">Connection</span>
                    <span class="info-value">${data.Database.ConnectionString}</span>
                </div>
            ` : ''}
            ${data.Database.Message ? `
                <div class="info-item">
                    <span class="info-label">Message</span>
                    <span class="info-value">${data.Database.Message}</span>
                </div>
            ` : ''}
        `;
    } else {
        dbDiv.innerHTML = '<div class="no-data">Database information not available</div>';
    }

    // Display routes
    const routesDiv = document.getElementById('routesList');
    if (data.routes && typeof data.routes === 'object') {
        const routeCategories = Object.entries(data.routes);
        if (routeCategories.length > 0) {
            routesDiv.innerHTML = routeCategories.map(([category, routes]) => `
                <div class="route-category">
                    <h4 class="category-title">${category.charAt(0).toUpperCase() + category.slice(1)}</h4>
                    <div class="route-grid">
                        ${Array.isArray(routes) ? routes.map(route => `
                            <div class="route-item">
                                <code>${route}</code>
                            </div>
                        `).join('') : `<div class="route-item"><code>${routes}</code></div>`}
                    </div>
                </div>
            `).join('');
        } else {
            routesDiv.innerHTML = '<div class="no-data">No routes information available</div>';
        }
    } else {
        routesDiv.innerHTML = '<div class="no-data">Routes information not available</div>';
    }

    // Display proxy configuration
    const proxyDiv = document.getElementById('proxyConfig');
    if (data.Proxies && typeof data.Proxies === 'object') {
        const proxyEntries = Object.entries(data.Proxies);
        if (proxyEntries.length > 0) {
            proxyDiv.innerHTML = `
                <div class="proxy-list">
                    ${proxyEntries.map(([name, config]) => `
                        <div class="proxy-item">
                            <span class="proxy-path">${name}</span>
                            <span class="proxy-arrow">‚Üí</span>
                            <span class="proxy-target">${config.target || config}</span>
                            ${config.status ? `<span class="badge bg-success ms-2">${config.status}</span>` : ''}
                        </div>
                    `).join('')}
                </div>
            `;
        } else {
            proxyDiv.innerHTML = '<div class="no-data">No proxy configuration available</div>';
        }
    } else {
        proxyDiv.innerHTML = '<div class="no-data">Proxy configuration not available</div>';
    }

    // Display environment information
    const envDiv = document.getElementById('environmentInfo');
    if (data.Environment) {
        envDiv.innerHTML = `
            <div class="info-grid">
                <div class="info-item">
                    <span class="info-label">Node Environment</span>
                    <span class="info-value">${data.Environment.NodeEnv || 'Unknown'}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Port</span>
                    <span class="info-value">${data.Environment.Port || 'Unknown'}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Yesterday</span>
                    <span class="info-value">${data.Yesterday || 'Unknown'}</span>
                </div>
            </div>
        `;
    } else {
        envDiv.innerHTML = '<div class="no-data">Environment information not available</div>';
    }

    // Display system information
    const systemDiv = document.getElementById('systemInfo');
    if (data.System) {
        systemDiv.innerHTML = `
            <div class="info-grid">
                <div class="info-item">
                    <span class="info-label">Node Version</span>
                    <span class="info-value">${data.System.NodeVersion || 'Unknown'}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Platform</span>
                    <span class="info-value">${data.System.Platform || 'Unknown'}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Architecture</span>
                    <span class="info-value">${data.System.Architecture || 'Unknown'}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Uptime</span>
                    <span class="info-value">${data.System.Uptime || 'Unknown'}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Memory Usage</span>
                    <span class="info-value">${data.System.Memory ? `${data.System.Memory.HeapUsed} / ${data.System.Memory.HeapTotal} (${data.System.Memory.HeapPercentage})` : 'Unknown'}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">RSS Memory</span>
                    <span class="info-value">${data.System.Memory?.RSS || 'Unknown'}</span>
                </div>
            </div>
        `;
    } else {
        systemDiv.innerHTML = '<div class="no-data">System information not available</div>';
    }
}

function showError(elementId, message) {
    document.getElementById(elementId).innerHTML = `
        <div class="error-message">
            <i class="bi bi-exclamation-triangle"></i> ${message}
        </div>
    `;
}

function formatUptime(seconds) {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    
    const parts = [];
    if (days > 0) parts.push(`${days}d`);
    if (hours > 0) parts.push(`${hours}h`);
    if (minutes > 0) parts.push(`${minutes}m`);
    
    return parts.join(' ') || '< 1m';
}

function formatMemory(memory) {
    if (!memory) return 'Unknown';
    const used = memory.heapUsed || 0;
    const total = memory.heapTotal || 0;
    const usedMB = (used / 1024 / 1024).toFixed(2);
    const totalMB = (total / 1024 / 1024).toFixed(2);
    return `${usedMB} MB / ${totalMB} MB`;
}
</script>

<style>
.version-info,
.database-status,
.routes-list,
.proxy-config,
.system-info {
    padding: 1.5rem;
}

.info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
}

.info-item {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.info-label {
    color: var(--text-secondary);
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.info-value {
    color: var(--text-primary);
    font-size: 1.125rem;
    font-weight: 400;
}

.status-indicator {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 1.25rem;
    font-weight: 600;
}

.status-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    animation: pulse 2s infinite;
}

.status-indicator.success .status-dot {
    background-color: var(--green);
}

.status-indicator.error .status-dot {
    background-color: var(--red);
}

.status-indicator.warning .status-dot {
    background-color: var(--yellow);
}

.status-indicator.success .status-text {
    color: var(--green);
}

.status-indicator.error .status-text {
    color: var(--red);
}

.status-indicator.warning .status-text {
    color: var(--yellow);
}

.route-category {
    margin-bottom: 2rem;
}

.route-category:last-child {
    margin-bottom: 0;
}

.category-title {
    color: var(--purple);
    font-size: 1.125rem;
    margin-bottom: 1rem;
    font-weight: 600;
}

.route-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 0.75rem;
}

/* Mobile-first responsive */
@media (min-width: 576px) {
    .route-grid {
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
}

@media (min-width: 768px) {
    .route-grid {
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    }
}

.route-item {
    background-color: var(--bg-secondary);
    padding: 0.75rem 1rem;
    border-radius: var(--radius-sm);
    border: 1px solid var(--border-color);
}

.route-item code {
    color: var(--cyan);
    font-size: 0.875rem;
}

.proxy-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.proxy-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    background-color: var(--bg-secondary);
    padding: 1rem;
    border-radius: var(--radius-sm);
    border: 1px solid var(--border-color);
}

.proxy-path {
    color: var(--cyan);
    font-family: 'Monaco', 'Consolas', monospace;
    font-size: 0.875rem;
}

.proxy-arrow {
    color: var(--text-secondary);
}

.proxy-target {
    color: var(--purple);
    font-family: 'Monaco', 'Consolas', monospace;
    font-size: 0.875rem;
}

.no-data {
    text-align: center;
    color: var(--text-secondary);
    padding: 2rem;
    font-style: italic;
}

.greeting-banner {
    background: linear-gradient(135deg, var(--purple) 0%, var(--cyan) 100%);
    color: white;
    padding: 1rem;
    border-radius: var(--radius-md);
    text-align: center;
    margin-top: 1rem;
    font-weight: 600;
}

.info-value.success {
    color: var(--green);
    font-weight: 600;
}

.info-value.error {
    color: var(--red);
    font-weight: 600;
}

.info-value.warning {
    color: var(--yellow);
    font-weight: 600;
}

.error-message {
    text-align: center;
    color: var(--red);
    padding: 2rem;
    font-size: 1.125rem;
}

.error-message i {
    font-size: 1.5rem;
    margin-right: 0.5rem;
}

.loading {
    text-align: center;
    color: var(--cyan);
    padding: 2rem;
    font-size: 1.125rem;
}

@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 currentColor;
    }
    70% {
        box-shadow: 0 0 0 10px transparent;
    }
    100% {
        box-shadow: 0 0 0 0 transparent;
    }
}

@media (max-width: 768px) {
    .info-grid {
        grid-template-columns: 1fr;
    }
    
    .route-grid {
        grid-template-columns: 1fr;
    }
    
    .proxy-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
    }
}
</style>