<div class="hero fade-in">
    <h1>GitHub Explorer</h1>
    <p class="lead">Explore GitHub users, repositories, and trending projects</p>
</div>

<div class="row">
    <div class="col-lg-10 mx-auto">
        <div class="card">
            <h2 class="card-title">User Search</h2>
            <form id="userSearchForm" class="api-form">
                <div class="form-group">
                    <label for="username" class="form-label">GitHub Username</label>
                    <input 
                        type="text" 
                        id="username" 
                        class="form-control" 
                        placeholder="Enter GitHub username"
                        required
                    >
                </div>
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-github"></i> Search User
                </button>
            </form>
            
            <div id="userResult" class="result-container mt-4" style="display: none;"></div>
        </div>

        <div class="card mt-4">
            <h3 class="card-title">Repository Search</h3>
            <form id="repoSearchForm" class="api-form">
                <div class="row">
                    <div class="col-md-8">
                        <div class="form-group">
                            <label for="repoQuery" class="form-label">Search Query</label>
                            <input 
                                type="text" 
                                id="repoQuery" 
                                class="form-control" 
                                placeholder="e.g., javascript framework"
                                required
                            >
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="language" class="form-label">Language</label>
                            <select id="language" class="form-control">
                                <option value="">Any Language</option>
                                <option value="javascript">JavaScript</option>
                                <option value="python">Python</option>
                                <option value="java">Java</option>
                                <option value="go">Go</option>
                                <option value="rust">Rust</option>
                                <option value="typescript">TypeScript</option>
                                <option value="c++">C++</option>
                                <option value="ruby">Ruby</option>
                            </select>
                        </div>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-search"></i> Search Repositories
                </button>
            </form>
            
            <div id="repoResults" class="result-container mt-4" style="display: none;"></div>
        </div>

        <div class="card mt-4">
            <h3 class="card-title">Trending Repositories</h3>
            <div class="trending-controls">
                <select id="trendingLanguage" class="form-control" style="width: 200px; display: inline-block;">
                    <option value="">All Languages</option>
                    <option value="javascript">JavaScript</option>
                    <option value="python">Python</option>
                    <option value="java">Java</option>
                    <option value="go">Go</option>
                </select>
                <select id="trendingPeriod" class="form-control" style="width: 150px; display: inline-block;">
                    <option value="daily">Today</option>
                    <option value="weekly">This Week</option>
                    <option value="monthly">This Month</option>
                </select>
                <button class="btn btn-primary" onclick="loadTrending()">
                    <i class="bi bi-arrow-clockwise"></i> Load Trending
                </button>
            </div>
            
            <div id="trendingRepos" class="trending-repos mt-4">
                <div class="loading">Loading trending repositories...</div>
            </div>
        </div>

        <div class="card mt-4">
            <h3 class="card-title">API Usage</h3>
            <div class="code-block">
                <h4>Get user info:</h4>
                <pre><code>curl <%= typeof baseUrl !== 'undefined' ? baseUrl : 'https://api.casjay.coffee' %>/api/v1/social/github/user/octocat</code></pre>
            </div>
            
            <div class="code-block">
                <h4>Get user repos:</h4>
                <pre><code>curl <%= typeof baseUrl !== 'undefined' ? baseUrl : 'https://api.casjay.coffee' %>/api/v1/social/github/users/octocat/repos</code></pre>
            </div>
            
            <div class="code-block">
                <h4>Search repositories:</h4>
                <pre><code>curl <%= typeof baseUrl !== 'undefined' ? baseUrl : 'https://api.casjay.coffee' %>/api/v1/social/github/search/repos?q=react</code></pre>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const userSearchForm = document.getElementById('userSearchForm');
    const repoSearchForm = document.getElementById('repoSearchForm');
    
    // Load initial trending repos
    loadTrending();
    
    userSearchForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const username = document.getElementById('username').value.trim();
        await searchUser(username);
    });
    
    repoSearchForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const query = document.getElementById('repoQuery').value.trim();
        const language = document.getElementById('language').value;
        await searchRepositories(query, language);
    });
});

async function searchUser(username) {
    const resultDiv = document.getElementById('userResult');
    resultDiv.style.display = 'block';
    resultDiv.innerHTML = '<div class="loading">Searching for user...</div>';
    
    try {
        const response = await fetch(`/api/v1/social/github/user/${username}`);
        const data = await response.json();
        
        if (response.ok) {
            displayUserInfo(data);
        } else {
            resultDiv.innerHTML = '<div class="error">User not found</div>';
        }
    } catch (error) {
        resultDiv.innerHTML = '<div class="error">Error loading user data</div>';
    }
}

function displayUserInfo(user) {
    const resultDiv = document.getElementById('userResult');
    
    const html = `
        <div class="user-profile">
            <div class="user-header">
                <img src="${user.avatar_url}" alt="${user.login}" class="user-avatar">
                <div class="user-info">
                    <h4>${user.name || user.login}</h4>
                    ${user.bio ? `<p class="user-bio">${user.bio}</p>` : ''}
                    <div class="user-stats">
                        <span><i class="bi bi-diagram-2"></i> ${user.public_repos} repos</span>
                        <span><i class="bi bi-people"></i> ${user.followers} followers</span>
                        <span><i class="bi bi-person-plus"></i> ${user.following} following</span>
                    </div>
                    <div class="user-details">
                        ${user.company ? `<span><i class="bi bi-building"></i> ${user.company}</span>` : ''}
                        ${user.location ? `<span><i class="bi bi-geo-alt"></i> ${user.location}</span>` : ''}
                        ${user.blog ? `<span><i class="bi bi-link-45deg"></i> <a href="${user.blog}" target="_blank">${user.blog}</a></span>` : ''}
                    </div>
                </div>
            </div>
            
            <div class="user-actions">
                <a href="${user.html_url}" target="_blank" class="btn btn-primary">
                    <i class="bi bi-github"></i> View on GitHub
                </a>
                <button class="btn btn-secondary" onclick="loadUserRepos('${user.login}')">
                    <i class="bi bi-collection"></i> View Repositories
                </button>
            </div>
            
            <div id="userRepos" class="user-repos mt-4" style="display: none;"></div>
        </div>
    `;
    
    resultDiv.innerHTML = html;
}

async function loadUserRepos(username) {
    const reposDiv = document.getElementById('userRepos');
    reposDiv.style.display = 'block';
    reposDiv.innerHTML = '<div class="loading">Loading repositories...</div>';
    
    try {
        const response = await fetch(`/api/v1/social/github/users/${username}/repos?sort=updated&per_page=10`);
        const repos = await response.json();
        
        if (response.ok) {
            displayRepositories(repos, reposDiv);
        } else {
            reposDiv.innerHTML = '<div class="error">Unable to load repositories</div>';
        }
    } catch (error) {
        reposDiv.innerHTML = '<div class="error">Error loading repositories</div>';
    }
}

async function searchRepositories(query, language) {
    const resultsDiv = document.getElementById('repoResults');
    resultsDiv.style.display = 'block';
    resultsDiv.innerHTML = '<div class="loading">Searching repositories...</div>';
    
    try {
        let searchQuery = query;
        if (language) {
            searchQuery += ` language:${language}`;
        }
        
        const response = await fetch(`/api/v1/social/github/search/repos?q=${encodeURIComponent(searchQuery)}&sort=stars`);
        const data = await response.json();
        
        if (response.ok) {
            displaySearchResults(data.items || []);
        } else {
            resultsDiv.innerHTML = '<div class="error">No repositories found</div>';
        }
    } catch (error) {
        resultsDiv.innerHTML = '<div class="error">Error searching repositories</div>';
    }
}

function displaySearchResults(repos) {
    const resultsDiv = document.getElementById('repoResults');
    
    if (repos.length === 0) {
        resultsDiv.innerHTML = '<div class="no-results">No repositories found</div>';
        return;
    }
    
    const html = `
        <h4>Search Results (${repos.length} repositories)</h4>
        <div class="repo-list">
            ${repos.map(repo => createRepoCard(repo)).join('')}
        </div>
    `;
    
    resultsDiv.innerHTML = html;
}

function displayRepositories(repos, container) {
    if (repos.length === 0) {
        container.innerHTML = '<div class="no-results">No repositories found</div>';
        return;
    }
    
    const html = `
        <div class="repo-list">
            ${repos.map(repo => createRepoCard(repo)).join('')}
        </div>
    `;
    
    container.innerHTML = html;
}

function createRepoCard(repo) {
    return `
        <div class="repo-card">
            <div class="repo-header">
                <h5 class="repo-name">
                    <a href="${repo.html_url}" target="_blank">${repo.full_name || repo.name}</a>
                </h5>
                ${repo.language ? `<span class="repo-language">${repo.language}</span>` : ''}
            </div>
            ${repo.description ? `<p class="repo-description">${repo.description}</p>` : ''}
            <div class="repo-stats">
                <span><i class="bi bi-star"></i> ${repo.stargazers_count || 0}</span>
                <span><i class="bi bi-diagram-2"></i> ${repo.forks_count || 0}</span>
                ${repo.open_issues_count !== undefined ? `<span><i class="bi bi-exclamation-circle"></i> ${repo.open_issues_count}</span>` : ''}
                ${repo.license ? `<span><i class="bi bi-file-text"></i> ${repo.license.spdx_id || repo.license.name}</span>` : ''}
            </div>
            <div class="repo-footer">
                <span class="repo-updated">Updated ${formatDate(repo.updated_at || repo.pushed_at)}</span>
            </div>
        </div>
    `;
}

async function loadTrending() {
    const language = document.getElementById('trendingLanguage').value;
    const period = document.getElementById('trendingPeriod').value;
    const container = document.getElementById('trendingRepos');
    
    container.innerHTML = '<div class="loading">Loading trending repositories...</div>';
    
    try {
        let url = '/api/v1/social/github/trending';
        const params = new URLSearchParams();
        if (language) params.append('language', language);
        if (period) params.append('since', period);
        if (params.toString()) url += '?' + params.toString();
        
        const response = await fetch(url);
        const data = await response.json();
        
        if (response.ok && data.success) {
            displayTrending(data.data);
        } else {
            // Mock trending data
            container.innerHTML = '<div class="error">Trending data not available</div>';
        }
    } catch (error) {
        container.innerHTML = '<div class="error">Failed to load trending repositories</div>';
    }
}

// Removed mock trending function

function displayTrending(repos) {
    const container = document.getElementById('trendingRepos');
    
    if (!repos || repos.length === 0) {
        container.innerHTML = '<div class="no-results">No trending repositories found</div>';
        return;
    }
    
    const html = `
        <div class="repo-list">
            ${repos.map((repo, index) => `
                <div class="repo-card trending">
                    <span class="trending-rank">#${index + 1}</span>
                    ${createRepoCard(repo)}
                </div>
            `).join('')}
        </div>
    `;
    
    container.innerHTML = html;
}

function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diff = now - date;
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    
    if (days === 0) return 'today';
    if (days === 1) return 'yesterday';
    if (days < 7) return `${days} days ago`;
    if (days < 30) return `${Math.floor(days / 7)} weeks ago`;
    if (days < 365) return `${Math.floor(days / 30)} months ago`;
    return `${Math.floor(days / 365)} years ago`;
}
</script>

<style>
.user-profile {
    background-color: var(--bg-secondary);
    padding: 2rem;
    border-radius: var(--radius-md);
}

.user-header {
    display: flex;
    gap: 2rem;
    margin-bottom: 1.5rem;
}

.user-avatar {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    border: 4px solid var(--purple);
}

.user-info {
    flex: 1;
}

.user-info h4 {
    color: var(--purple);
    margin-bottom: 0.5rem;
}

.user-bio {
    color: var(--text-primary);
    margin-bottom: 1rem;
}

.user-stats {
    display: flex;
    gap: 1.5rem;
    margin-bottom: 1rem;
}

.user-stats span {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    color: var(--text-secondary);
}

.user-stats i {
    color: var(--cyan);
}

.user-details {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
}

.user-details span {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    color: var(--text-secondary);
}

.user-details i {
    color: var(--purple);
}

.user-details a {
    color: var(--cyan);
    text-decoration: none;
}

.user-details a:hover {
    text-decoration: underline;
}

.user-actions {
    display: flex;
    gap: 1rem;
}

.trending-controls {
    display: flex;
    gap: 1rem;
    align-items: center;
    flex-wrap: wrap;
}

.repo-list {
    display: grid;
    gap: 1rem;
}

.repo-card {
    background-color: var(--bg-secondary);
    padding: 1.5rem;
    border-radius: var(--radius-md);
    border: 1px solid var(--border-color);
    transition: all 0.2s ease;
}

.repo-card:hover {
    border-color: var(--purple);
    transform: translateY(-2px);
}

.repo-card.trending {
    position: relative;
    padding-left: 3.5rem;
}

.trending-rank {
    position: absolute;
    left: 1rem;
    top: 1.5rem;
    width: 30px;
    height: 30px;
    background-color: var(--purple);
    color: var(--background);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
}

.repo-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
}

.repo-name {
    margin: 0;
}

.repo-name a {
    color: var(--cyan);
    text-decoration: none;
}

.repo-name a:hover {
    text-decoration: underline;
}

.repo-language {
    background-color: var(--bg-primary);
    color: var(--purple);
    padding: 0.25rem 0.75rem;
    border-radius: var(--radius-sm);
    font-size: 0.875rem;
}

.repo-description {
    color: var(--text-primary);
    margin-bottom: 1rem;
    line-height: 1.5;
}

.repo-stats {
    display: flex;
    gap: 1.5rem;
    margin-bottom: 1rem;
}

.repo-stats span {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    color: var(--text-secondary);
    font-size: 0.875rem;
}

.repo-stats i {
    color: var(--cyan);
}

.repo-footer {
    border-top: 1px solid var(--border-color);
    padding-top: 0.75rem;
}

.repo-updated {
    color: var(--text-secondary);
    font-size: 0.875rem;
}

.user-repos {
    border-top: 1px solid var(--border-color);
    padding-top: 1.5rem;
}

.no-results {
    text-align: center;
    padding: 3rem;
    color: var(--text-secondary);
}

.loading {
    text-align: center;
    padding: 3rem;
    color: var(--cyan);
}

.error {
    text-align: center;
    padding: 3rem;
    color: var(--red);
}

@media (max-width: 768px) {
    .user-header {
        flex-direction: column;
        align-items: center;
        text-align: center;
    }
    
    .user-stats,
    .user-details {
        justify-content: center;
    }
    
    .user-actions {
        justify-content: center;
    }
}
</style>